{"version":3,"sources":["webpack:////home/travis/build/ng-web-apis/audio/$_lazy_route_resource lazy namespace object","webpack:///../audio/src/constants/polling-time.ts","webpack:///../audio/src/decorators/audio-param.ts","webpack:///../audio/src/directives/audio-context.ts","webpack:///../audio/src/directives/channel.ts","webpack:///../audio/src/directives/destination.ts","webpack:///../audio/src/directives/listener.ts","webpack:///../audio/src/directives/offline-audio-context.ts","webpack:///../audio/src/directives/output.ts","webpack:///../audio/src/directives/stream-destination.ts","webpack:///../audio/src/module.ts","webpack:///../audio/src/nodes/analyser.ts","webpack:///../audio/src/nodes/biquad-filter.ts","webpack:///../audio/src/nodes/channel-merger.ts","webpack:///../audio/src/nodes/channel-splitter.ts","webpack:///../audio/src/nodes/convolver.ts","webpack:///../audio/src/nodes/delay.ts","webpack:///../audio/src/nodes/dynamics-compressor.ts","webpack:///../audio/src/nodes/gain.ts","webpack:///../audio/src/nodes/iir-filter.ts","webpack:///../audio/src/nodes/panner.ts","webpack:///../audio/src/nodes/script-processor.ts","webpack:///../audio/src/nodes/stereo-panner.ts","webpack:///../audio/src/nodes/wave-shaper.ts","webpack:///../audio/src/nodes/worklet.ts","webpack:///../audio/src/pipes/audio-param.pipe.ts","webpack:///../audio/src/pipes/periodic-wave.pipe.ts","webpack:///../audio/src/public-api.ts","webpack:///../audio/src/services/audio-buffer.service.ts","webpack:///../audio/src/sources/buffer-source.ts","webpack:///../audio/src/sources/constant-source.ts","webpack:///../audio/src/sources/media-source.ts","webpack:///../audio/src/sources/media-stream-source.ts","webpack:///../audio/src/sources/media-stream-track-source.ts","webpack:///../audio/src/sources/oscillator.ts","webpack:///../audio/src/tokens/audio-context.ts","webpack:///../audio/src/tokens/audio-node.ts","webpack:///../audio/src/tokens/audio-worklet-processors-ready.ts","webpack:///../audio/src/tokens/audio-worklet-processors.ts","webpack:///../audio/src/tokens/constructor-support.ts","webpack:///../audio/src/tokens/feedback-coefficients.ts","webpack:///../audio/src/tokens/feedforward-coefficients.ts","webpack:///../audio/src/tokens/media-stream-track.ts","webpack:///../audio/src/tokens/media-stream.ts","webpack:///../audio/src/tokens/support.ts","webpack:///../audio/src/utils/connect.ts","webpack:///../audio/src/utils/fallback-audio-param.ts","webpack:///../audio/src/utils/latency-hint-factory.ts","webpack:///../audio/src/utils/parse.ts","webpack:///../audio/src/utils/process-audio-param.ts","webpack:///./src/app/app.browser.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/main.browser.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../../$$_lazy_route_resource lazy recursive\";","export const POLLING_TIME = 100;\n","import {AudioNodeWithParams} from '../types/audio-node-with-params';\nimport {\n    AudioParamDecorator,\n    AudioParamWorkletDecorator,\n} from '../types/audio-param-decorator';\nimport {AudioParamInput} from '../types/audio-param-input';\nimport {processAudioParam} from '../utils/process-audio-param';\n\nexport function audioParam(): AudioParamWorkletDecorator;\nexport function audioParam<K extends string>(param: K): AudioParamDecorator<K>;\nexport function audioParam<K extends string>(\n    param: string = '',\n): AudioParamDecorator<K> | AudioParamWorkletDecorator {\n    const decorator: AudioParamDecorator<K> = (target, propertyKey) => {\n        Object.defineProperty(target, propertyKey, {\n            set(this: AudioNodeWithParams<K> | AudioWorkletNode, value: AudioParamInput) {\n                value = typeof value === 'string' ? Number.parseFloat(value) : value;\n\n                const audioParam =\n                    this instanceof AudioWorkletNode\n                        ? (this.parameters as Map<string, AudioParam | undefined>).get(\n                              propertyKey,\n                          )\n                        : this[param as K];\n\n                if (audioParam instanceof AudioParam) {\n                    processAudioParam(audioParam, value, this.context.currentTime);\n                } else {\n                    // Fallback for older browsers\n                    Object.defineProperty(target, propertyKey, {value});\n                }\n            },\n        });\n    };\n\n    return decorator;\n}\n","import {Attribute, Directive, forwardRef, OnDestroy} from '@angular/core';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {latencyHintFactory} from '../utils/latency-hint-factory';\n\n// @dynamic\n@Directive({\n    selector: '[waAudioContext]',\n    providers: [\n        {\n            provide: AUDIO_CONTEXT,\n            useExisting: forwardRef(() => WebAudioContext),\n        },\n    ],\n})\nexport class WebAudioContext extends AudioContext implements OnDestroy {\n    constructor(\n        @Attribute('latencyHint') latencyHint: AudioContextLatencyCategory | null,\n        @Attribute('sampleRate') sampleRate: string | null,\n    ) {\n        super({\n            latencyHint: latencyHintFactory(latencyHint),\n            sampleRate: parseInt(sampleRate || '', 10) || undefined,\n        });\n    }\n\n    ngOnDestroy() {\n        this.close();\n    }\n}\n","import {Directive, Inject, OnDestroy} from '@angular/core';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\n\n// @dynamic\n@Directive({\n    selector: '[waChannel]',\n    exportAs: 'AudioNode',\n})\nexport class WebAudioChannel extends GainNode implements OnDestroy {\n    constructor(\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n    ) {\n        if (modern) {\n            super(context);\n        } else {\n            const result = context.createGain();\n\n            Object.setPrototypeOf(result, WebAudioChannel.prototype);\n\n            return result as WebAudioChannel;\n        }\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n}\n","import {Directive, Inject, OnDestroy, Output} from '@angular/core';\nimport {interval, Observable} from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    filter,\n    map,\n    mapTo,\n    skipWhile,\n    tap,\n} from 'rxjs/operators';\nimport {POLLING_TIME} from '../constants/polling-time';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\nimport {connect} from '../utils/connect';\n\n// @dynamic\n@Directive({\n    selector: '[waAudioDestinationNode]',\n    exportAs: 'AudioNode',\n})\nexport class WebAudioDestination extends AnalyserNode implements OnDestroy {\n    @Output()\n    quiet?: Observable<unknown>;\n\n    constructor(\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @Inject(AUDIO_NODE) node: AudioNode | null,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n    ) {\n        if (modern) {\n            super(context);\n            WebAudioDestination.init(this, node);\n        } else {\n            const result = context.createAnalyser() as WebAudioDestination;\n\n            Object.setPrototypeOf(result, WebAudioDestination.prototype);\n            WebAudioDestination.init(result, node);\n\n            return result;\n        }\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n\n    private isSilent(array: Float32Array): boolean {\n        return Math.abs(array.reduce((acc, cur) => acc + cur, 0)) < 0.001;\n    }\n\n    static init(that: WebAudioDestination, node: AudioNode | null) {\n        connect(\n            node,\n            that,\n        );\n        that.fftSize = 256;\n        that.connect(that.context.destination);\n        that.quiet = interval(POLLING_TIME).pipe(\n            mapTo(new Float32Array(that.fftSize)),\n            tap(array => that.getFloatTimeDomainData(array)),\n            map(array => that.isSilent(array)),\n            distinctUntilChanged(),\n            skipWhile(isSilent => isSilent),\n            debounceTime(5000),\n            filter(isSilent => isSilent),\n        );\n    }\n}\n","import {Directive, Inject, Input, OnChanges, Self} from '@angular/core';\nimport {audioParam} from '../decorators/audio-param';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\nimport {AudioParamInput} from '../types/audio-param-input';\nimport {fallbackAudioParam} from '../utils/fallback-audio-param';\n\n// @dynamic\n@Directive({\n    selector: '[waAudioContext],[waOfflineAudioContext][length][sampleRate]',\n})\nexport class WebAudioListener extends GainNode implements OnChanges {\n    @Input('forwardX')\n    @audioParam('forwardX')\n    forwardXParam?: AudioParamInput;\n\n    @Input('forwardY')\n    @audioParam('forwardY')\n    forwardYParam?: AudioParamInput;\n\n    @Input('forwardZ')\n    @audioParam('forwardZ')\n    forwardZParam?: AudioParamInput;\n\n    @Input('positionX')\n    @audioParam('positionX')\n    positionXParam?: AudioParamInput;\n\n    @Input('positionY')\n    @audioParam('positionY')\n    positionYParam?: AudioParamInput;\n\n    @Input('positionZ')\n    @audioParam('positionZ')\n    positionZParam?: AudioParamInput;\n\n    @Input('upX')\n    @audioParam('upX')\n    upXParam?: AudioParamInput;\n\n    @Input('upY')\n    @audioParam('upY')\n    upYParam?: AudioParamInput;\n\n    @Input('upZ')\n    @audioParam('upZ')\n    upZParam?: AudioParamInput;\n\n    constructor(\n        @Self() @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n    ) {\n        if (modern) {\n            super(context);\n        } else {\n            const result = context.createGain();\n\n            Object.setPrototypeOf(result, WebAudioListener.prototype);\n\n            return result as WebAudioListener;\n        }\n    }\n\n    get forwardX(): AudioParam {\n        return this.context.listener.forwardX;\n    }\n\n    get forwardY(): AudioParam {\n        return this.context.listener.forwardY;\n    }\n\n    get forwardZ(): AudioParam {\n        return this.context.listener.forwardZ;\n    }\n\n    get positionX(): AudioParam {\n        return this.context.listener.positionX;\n    }\n\n    get positionY(): AudioParam {\n        return this.context.listener.positionY;\n    }\n\n    get positionZ(): AudioParam {\n        return this.context.listener.positionZ;\n    }\n\n    get upX(): AudioParam {\n        return this.context.listener.upX;\n    }\n\n    get upY(): AudioParam {\n        return this.context.listener.upY;\n    }\n\n    get upZ(): AudioParam {\n        return this.context.listener.upZ;\n    }\n\n    ngOnChanges() {\n        if (this.context.listener.positionX instanceof AudioParam) {\n            return;\n        }\n\n        // Fallback for older browsers\n        this.context.listener.setOrientation(\n            fallbackAudioParam(this.forwardXParam),\n            fallbackAudioParam(this.forwardYParam),\n            fallbackAudioParam(this.forwardZParam),\n            fallbackAudioParam(this.upXParam),\n            fallbackAudioParam(this.upYParam),\n            fallbackAudioParam(this.upZParam),\n        );\n        this.context.listener.setPosition(\n            fallbackAudioParam(this.positionXParam),\n            fallbackAudioParam(this.positionYParam),\n            fallbackAudioParam(this.positionZParam),\n        );\n    }\n}\n","import {Attribute, Directive, EventEmitter, forwardRef, Output} from '@angular/core';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\n\n// @dynamic\n@Directive({\n    selector: '[waOfflineAudioContext][length][sampleRate]',\n    providers: [\n        {\n            provide: AUDIO_CONTEXT,\n            useExisting: forwardRef(() => WebAudioOfflineContext),\n        },\n    ],\n})\nexport class WebAudioOfflineContext extends OfflineAudioContext {\n    @Output()\n    readonly complete = new EventEmitter<AudioBuffer>();\n\n    readonly oncomplete = ({renderedBuffer}: OfflineAudioCompletionEvent) =>\n        this.complete.emit(renderedBuffer);\n\n    constructor(\n        @Attribute('length') length: string,\n        @Attribute('sampleRate') sampleRate: string,\n        @Attribute('numberOfChannels') numberOfChannels: string | null,\n        @Attribute('autoplay') autoplay: string | null,\n    ) {\n        super(\n            parseInt(numberOfChannels || '', 10) || 1,\n            parseInt(length, 10),\n            parseInt(sampleRate, 10),\n        );\n\n        if (autoplay !== null) {\n            this.startRendering();\n        }\n    }\n}\n","import {Directive, Inject, Input, OnDestroy} from '@angular/core';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\nimport {connect} from '../utils/connect';\n\n// @dynamic\n@Directive({\n    selector: '[waOutput]',\n})\nexport class WebAudioOutput extends GainNode implements OnDestroy {\n    @Input()\n    set waOutput(destination: AudioNode | AudioParam | undefined) {\n        this.disconnect();\n        connect(\n            this,\n            destination,\n        );\n    }\n\n    constructor(\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @Inject(AUDIO_NODE) node: AudioNode | null,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n    ) {\n        if (modern) {\n            super(context);\n            connect(\n                node,\n                this,\n            );\n        } else {\n            const result = context.createGain();\n\n            Object.setPrototypeOf(result, WebAudioOutput.prototype);\n            connect(\n                node,\n                result,\n            );\n\n            return result as WebAudioOutput;\n        }\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n\n    static init(that: WebAudioOutput, node: AudioNode | null) {\n        connect(\n            node,\n            that,\n        );\n    }\n}\n","import {Directive, Inject} from '@angular/core';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\nimport {connect} from '../utils/connect';\n\n// @dynamic\n@Directive({\n    selector: '[waMediaStreamAudioDestinationNode]',\n    exportAs: 'AudioNode',\n})\nexport class WebAudioMediaStreamDestination extends MediaStreamAudioDestinationNode {\n    constructor(\n        @Inject(AUDIO_CONTEXT) context: AudioContext,\n        @Inject(AUDIO_NODE) node: AudioNode | null,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n    ) {\n        if (modern) {\n            super(context);\n            connect(\n                node,\n                this,\n            );\n        } else {\n            const result = context.createMediaStreamDestination();\n\n            Object.setPrototypeOf(result, WebAudioMediaStreamDestination.prototype);\n            connect(\n                node,\n                result,\n            );\n\n            return result as WebAudioMediaStreamDestination;\n        }\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {WebAudioContext} from './directives/audio-context';\nimport {WebAudioChannel} from './directives/channel';\nimport {WebAudioDestination} from './directives/destination';\nimport {WebAudioListener} from './directives/listener';\nimport {WebAudioOfflineContext} from './directives/offline-audio-context';\nimport {WebAudioOutput} from './directives/output';\nimport {WebAudioMediaStreamDestination} from './directives/stream-destination';\nimport {WebAudioAnalyser} from './nodes/analyser';\nimport {WebAudioBiquadFilter} from './nodes/biquad-filter';\nimport {WebAudioChannelMerger} from './nodes/channel-merger';\nimport {WebAudioChannelSplitter} from './nodes/channel-splitter';\nimport {WebAudioConvolver} from './nodes/convolver';\nimport {WebAudioDelay} from './nodes/delay';\nimport {WebAudioDynamicsCompressor} from './nodes/dynamics-compressor';\nimport {WebAudioGain} from './nodes/gain';\nimport {WebAudioIIRFilter} from './nodes/iir-filter';\nimport {WebAudioPanner} from './nodes/panner';\nimport {WebAudioScriptProcessor} from './nodes/script-processor';\nimport {WebAudioStereoPanner} from './nodes/stereo-panner';\nimport {WebAudioWaveShaper} from './nodes/wave-shaper';\nimport {WebAudioWorklet} from './nodes/worklet';\nimport {WebAudioParamPipe} from './pipes/audio-param.pipe';\nimport {WebAudioPeriodicWavePipe} from './pipes/periodic-wave.pipe';\nimport {WebAudioBufferSource} from './sources/buffer-source';\nimport {WebAudioConstantSource} from './sources/constant-source';\nimport {WebAudioMediaSource} from './sources/media-source';\nimport {WebAudioMediaStreamSource} from './sources/media-stream-source';\nimport {WebAudioMediaStreamTrackSource} from './sources/media-stream-track-source';\nimport {WebAudioOscillator} from './sources/oscillator';\n\n@NgModule({\n    declarations: [\n        WebAudioContext,\n        WebAudioChannel,\n        WebAudioDestination,\n        WebAudioListener,\n        WebAudioOfflineContext,\n        WebAudioOutput,\n        WebAudioMediaStreamDestination,\n        WebAudioBufferSource,\n        WebAudioConstantSource,\n        WebAudioMediaSource,\n        WebAudioMediaStreamSource,\n        WebAudioMediaStreamTrackSource,\n        WebAudioOscillator,\n        WebAudioAnalyser,\n        WebAudioBiquadFilter,\n        WebAudioChannelSplitter,\n        WebAudioChannelMerger,\n        WebAudioConvolver,\n        WebAudioDelay,\n        WebAudioDynamicsCompressor,\n        WebAudioGain,\n        WebAudioIIRFilter,\n        WebAudioPanner,\n        WebAudioScriptProcessor,\n        WebAudioStereoPanner,\n        WebAudioWaveShaper,\n        WebAudioWorklet,\n        WebAudioParamPipe,\n        WebAudioPeriodicWavePipe,\n    ],\n    exports: [\n        WebAudioContext,\n        WebAudioChannel,\n        WebAudioDestination,\n        WebAudioListener,\n        WebAudioOfflineContext,\n        WebAudioOutput,\n        WebAudioMediaStreamDestination,\n        WebAudioBufferSource,\n        WebAudioConstantSource,\n        WebAudioMediaSource,\n        WebAudioMediaStreamSource,\n        WebAudioMediaStreamTrackSource,\n        WebAudioOscillator,\n        WebAudioAnalyser,\n        WebAudioBiquadFilter,\n        WebAudioChannelSplitter,\n        WebAudioChannelMerger,\n        WebAudioConvolver,\n        WebAudioDelay,\n        WebAudioDynamicsCompressor,\n        WebAudioGain,\n        WebAudioIIRFilter,\n        WebAudioPanner,\n        WebAudioScriptProcessor,\n        WebAudioStereoPanner,\n        WebAudioWaveShaper,\n        WebAudioWorklet,\n        WebAudioParamPipe,\n        WebAudioPeriodicWavePipe,\n    ],\n})\nexport class WebAudioModule {}\n","import {\n    Attribute,\n    Directive,\n    forwardRef,\n    Inject,\n    OnDestroy,\n    Output,\n    SkipSelf,\n} from '@angular/core';\nimport {animationFrameScheduler, interval, Observable} from 'rxjs';\nimport {map, share} from 'rxjs/operators';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\nimport {connect} from '../utils/connect';\nimport {parse} from '../utils/parse';\n\n// @dynamic\n@Directive({\n    selector: '[waAnalyserNode]',\n    exportAs: 'AudioNode',\n    inputs: [\n        'fftSize',\n        'minDecibels',\n        'maxDecibels',\n        'smoothingTimeConstant',\n        'channelCount',\n        'channelCountMode',\n        'channelInterpretation',\n    ],\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioAnalyser),\n        },\n    ],\n})\nexport class WebAudioAnalyser extends AnalyserNode implements OnDestroy {\n    // '!' because it is actually set in constructor\n    @Output()\n    frequencyByte$!: Observable<Uint8Array>;\n\n    @Output()\n    frequencyFloat$!: Observable<Float32Array>;\n\n    @Output()\n    timeByte$!: Observable<Uint8Array>;\n\n    @Output()\n    timeFloat$!: Observable<Float32Array>;\n\n    constructor(\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @SkipSelf() @Inject(AUDIO_NODE) node: AudioNode | null,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n        @Attribute('fftSize') fftSizeArg: string | null,\n        @Attribute('maxDecibels') maxDecibelsArg: string | null,\n        @Attribute('minDecibels') minDecibelsArg: string | null,\n        @Attribute('smoothingTimeConstant') smoothingTimeConstantArg: string | null,\n    ) {\n        const fftSize = parse(fftSizeArg, 2048);\n        const maxDecibels = parse(maxDecibelsArg, -30);\n        const minDecibels = parse(minDecibelsArg, -100);\n        const smoothingTimeConstant = parse(smoothingTimeConstantArg, 0.8);\n\n        if (modern) {\n            super(context, {fftSize, maxDecibels, minDecibels, smoothingTimeConstant});\n            WebAudioAnalyser.init(this, node);\n        } else {\n            const result = context.createAnalyser() as WebAudioAnalyser;\n\n            Object.setPrototypeOf(result, WebAudioAnalyser.prototype);\n            WebAudioAnalyser.init(result, node);\n\n            result.fftSize = fftSize;\n            result.maxDecibels = maxDecibels;\n            result.minDecibels = minDecibels;\n            result.smoothingTimeConstant = smoothingTimeConstant;\n\n            return result;\n        }\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n\n    static init(that: WebAudioAnalyser, node: AudioNode | null) {\n        connect(\n            node,\n            that,\n        );\n\n        let freqByte = new Uint8Array(that.frequencyBinCount);\n        let freqFloat = new Float32Array(that.frequencyBinCount);\n        let timeByte = new Uint8Array(that.fftSize);\n        let timeFloat = new Float32Array(that.fftSize);\n\n        that.frequencyByte$ = interval(0, animationFrameScheduler).pipe(\n            map(() => {\n                if (freqByte.length !== that.frequencyBinCount) {\n                    freqByte = new Uint8Array(that.frequencyBinCount);\n                }\n\n                that.getByteFrequencyData(freqByte);\n\n                return freqByte;\n            }),\n            share(),\n        );\n\n        that.frequencyFloat$ = interval(0, animationFrameScheduler).pipe(\n            map(() => {\n                if (freqFloat.length !== that.frequencyBinCount) {\n                    freqFloat = new Float32Array(that.frequencyBinCount);\n                }\n\n                that.getFloatFrequencyData(freqFloat);\n\n                return freqFloat;\n            }),\n            share(),\n        );\n\n        that.timeByte$ = interval(0, animationFrameScheduler).pipe(\n            map(() => {\n                if (timeByte.length !== that.fftSize) {\n                    timeByte = new Uint8Array(that.frequencyBinCount);\n                }\n\n                that.getByteTimeDomainData(timeByte);\n\n                return timeByte;\n            }),\n            share(),\n        );\n\n        that.timeFloat$ = interval(0, animationFrameScheduler).pipe(\n            map(() => {\n                if (timeFloat.length !== that.fftSize) {\n                    timeFloat = new Float32Array(that.frequencyBinCount);\n                }\n\n                that.getFloatTimeDomainData(timeFloat);\n\n                return timeFloat;\n            }),\n            share(),\n        );\n    }\n}\n","import {\n    Attribute,\n    Directive,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    SkipSelf,\n} from '@angular/core';\nimport {audioParam} from '../decorators/audio-param';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\nimport {AudioParamInput} from '../types/audio-param-input';\nimport {connect} from '../utils/connect';\nimport {parse} from '../utils/parse';\n\n// @dynamic\n@Directive({\n    selector: '[waBiquadFilterNode]',\n    exportAs: 'AudioNode',\n    inputs: ['type', 'channelCount', 'channelCountMode', 'channelInterpretation'],\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioBiquadFilter),\n        },\n    ],\n})\nexport class WebAudioBiquadFilter extends BiquadFilterNode implements OnDestroy {\n    @Input('detune')\n    @audioParam('detune')\n    detuneParam?: AudioParamInput;\n\n    @Input('frequency')\n    @audioParam('frequency')\n    frequencyParam?: AudioParamInput;\n\n    @Input('gain')\n    @audioParam('gain')\n    gainParam?: AudioParamInput;\n\n    @Input('Q')\n    @audioParam('Q')\n    qParam?: AudioParamInput;\n\n    constructor(\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n        @SkipSelf() @Inject(AUDIO_NODE) node: AudioNode | null,\n        @Attribute('detune') detuneArg: string | null,\n        @Attribute('frequency') frequencyArg: string | null,\n        @Attribute('gain') gainArg: string | null,\n        @Attribute('Q') QArg: string | null,\n    ) {\n        const detune = parse(detuneArg, 0);\n        const frequency = parse(frequencyArg, 350);\n        const gain = parse(gainArg, 0);\n        const Q = parse(QArg, 1);\n\n        if (modern) {\n            super(context, {detune, frequency, gain, Q});\n            connect(\n                node,\n                this,\n            );\n        } else {\n            const result = context.createBiquadFilter() as WebAudioBiquadFilter;\n\n            Object.setPrototypeOf(result, WebAudioBiquadFilter.prototype);\n\n            result.detune.value = detune;\n            result.frequency.value = frequency;\n            result.gain.value = gain;\n            result.Q.value = Q;\n\n            connect(\n                node,\n                result,\n            );\n\n            return result;\n        }\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n\n    static init(that: WebAudioBiquadFilter, node: AudioNode | null) {\n        connect(\n            node,\n            that,\n        );\n    }\n}\n","import {\n    Attribute,\n    ContentChildren,\n    Directive,\n    forwardRef,\n    Inject,\n    OnDestroy,\n    QueryList,\n} from '@angular/core';\nimport {WebAudioChannel} from '../directives/channel';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\n\n// @dynamic\n@Directive({\n    selector: '[waChannelMergerNode]',\n    exportAs: 'AudioNode',\n    inputs: ['channelCount', 'channelCountMode', 'channelInterpretation'],\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioChannelMerger),\n        },\n    ],\n})\nexport class WebAudioChannelMerger extends ChannelMergerNode implements OnDestroy {\n    @ContentChildren(WebAudioChannel, {descendants: false})\n    set channels(channels: QueryList<AudioNode>) {\n        channels.forEach((node, index) => {\n            node.connect(this, 0, index);\n        });\n    }\n\n    constructor(\n        @Attribute('numberOfInputs') inputs: string | null,\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n    ) {\n        const numberOfInputs = parseInt(inputs || '', 10) || 6;\n\n        if (modern) {\n            super(context, {numberOfInputs});\n        } else {\n            const result = context.createChannelMerger(numberOfInputs);\n\n            Object.setPrototypeOf(result, WebAudioChannelMerger.prototype);\n\n            return result as WebAudioChannelMerger;\n        }\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n}\n","import {\n    Attribute,\n    ContentChildren,\n    Directive,\n    Inject,\n    OnDestroy,\n    QueryList,\n    SkipSelf,\n} from '@angular/core';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\nimport {connect} from '../utils/connect';\n\n// @dynamic\n@Directive({\n    selector: '[waChannelSplitterNode]',\n    exportAs: 'AudioNode',\n    inputs: ['channelCount', 'channelCountMode', 'channelInterpretation'],\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useValue: null,\n        },\n    ],\n})\nexport class WebAudioChannelSplitter extends ChannelSplitterNode implements OnDestroy {\n    @ContentChildren(AUDIO_NODE as any, {descendants: false})\n    set channels(channels: QueryList<AudioNode | null>) {\n        this.disconnect();\n        channels\n            .filter(node => !!node)\n            .forEach((node, index) => {\n                this.connect(node!, index);\n            });\n    }\n\n    constructor(\n        @Attribute('numberOfOutputs') outputs: string | null,\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @SkipSelf() @Inject(AUDIO_NODE) node: AudioNode | null,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n    ) {\n        const numberOfOutputs = parseInt(outputs || '', 10) || 6;\n\n        if (modern) {\n            super(context, {numberOfOutputs});\n            connect(\n                node,\n                this,\n            );\n        } else {\n            const result = context.createChannelSplitter(numberOfOutputs);\n\n            Object.setPrototypeOf(result, WebAudioChannelSplitter.prototype);\n            connect(\n                node,\n                result,\n            );\n\n            return result as WebAudioChannelSplitter;\n        }\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n}\n","import {Directive, forwardRef, Inject, Input, OnDestroy, SkipSelf} from '@angular/core';\nimport {of, Subject} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\nimport {AudioBufferService} from '../services/audio-buffer.service';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\nimport {connect} from '../utils/connect';\n\n// @dynamic\n@Directive({\n    selector: '[waConvolverNode]',\n    exportAs: 'AudioNode',\n    inputs: ['normalize', 'channelCount', 'channelCountMode', 'channelInterpretation'],\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioConvolver),\n        },\n    ],\n})\nexport class WebAudioConvolver extends ConvolverNode implements OnDestroy {\n    @Input('buffer')\n    set bufferSetter(source: AudioBuffer | null | string) {\n        this.buffer$.next(source);\n    }\n\n    buffer$!: Subject<AudioBuffer | null | string>;\n\n    constructor(\n        @Inject(AudioBufferService) audioBufferService: AudioBufferService,\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @SkipSelf() @Inject(AUDIO_NODE) node: AudioNode | null,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n    ) {\n        if (modern) {\n            super(context);\n            WebAudioConvolver.init(this, node, audioBufferService);\n        } else {\n            const result = context.createConvolver() as WebAudioConvolver;\n\n            Object.setPrototypeOf(result, WebAudioConvolver.prototype);\n            WebAudioConvolver.init(result, node, audioBufferService);\n\n            return result;\n        }\n    }\n\n    ngOnDestroy() {\n        this.buffer$.complete();\n        this.disconnect();\n    }\n\n    static init(\n        that: WebAudioConvolver,\n        node: AudioNode | null,\n        audioBufferService: AudioBufferService,\n    ) {\n        connect(\n            node,\n            that,\n        );\n        that.buffer$ = new Subject<AudioBuffer | null | string>();\n        that.buffer$\n            .pipe(\n                switchMap(source =>\n                    typeof source === 'string'\n                        ? audioBufferService.fetch(source)\n                        : of(source),\n                ),\n            )\n            .subscribe(buffer => {\n                that.buffer = buffer;\n            });\n    }\n}\n","import {\n    Attribute,\n    Directive,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    SkipSelf,\n} from '@angular/core';\nimport {audioParam} from '../decorators/audio-param';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\nimport {AudioParamInput} from '../types/audio-param-input';\nimport {connect} from '../utils/connect';\nimport {parse} from '../utils/parse';\n\n// @dynamic\n@Directive({\n    selector: '[waDelayNode]',\n    exportAs: 'AudioNode',\n    inputs: ['channelCount', 'channelCountMode', 'channelInterpretation'],\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioDelay),\n        },\n    ],\n})\nexport class WebAudioDelay extends DelayNode implements OnDestroy {\n    @Input('delayTime')\n    @audioParam('delayTime')\n    delayTimeParam?: AudioParamInput;\n\n    constructor(\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @SkipSelf() @Inject(AUDIO_NODE) node: AudioNode | null,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n        @Attribute('delayTime') delayTimeArg: string | null,\n        @Attribute('maxDelayTime') maxDelayTimeArg: string | null,\n    ) {\n        const delayTime = parse(delayTimeArg, 0);\n        const maxDelayTime = parse(maxDelayTimeArg, 1);\n\n        if (modern) {\n            super(context, {delayTime, maxDelayTime});\n            connect(\n                node,\n                this,\n            );\n        } else {\n            const result = context.createDelay(maxDelayTime) as WebAudioDelay;\n\n            Object.setPrototypeOf(result, WebAudioDelay.prototype);\n            connect(\n                node,\n                result,\n            );\n            result.delayTime.value = delayTime;\n\n            return result;\n        }\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n\n    static init(that: WebAudioDelay, node: AudioNode | null) {\n        connect(\n            node,\n            that,\n        );\n    }\n}\n","import {\n    Attribute,\n    Directive,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    SkipSelf,\n} from '@angular/core';\nimport {audioParam} from '../decorators/audio-param';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\nimport {AudioParamInput} from '../types/audio-param-input';\nimport {connect} from '../utils/connect';\nimport {parse} from '../utils/parse';\n\n// @dynamic\n@Directive({\n    selector: '[waDynamicsCompressorNode]',\n    exportAs: 'AudioNode',\n    inputs: ['channelCount', 'channelCountMode', 'channelInterpretation'],\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioDynamicsCompressor),\n        },\n    ],\n})\nexport class WebAudioDynamicsCompressor extends DynamicsCompressorNode\n    implements OnDestroy {\n    @Input('attack')\n    @audioParam('attack')\n    attackParam?: AudioParamInput;\n\n    @Input('knee')\n    @audioParam('knee')\n    kneeParam?: AudioParamInput;\n\n    @Input('ratio')\n    @audioParam('ratio')\n    ratioParam?: AudioParamInput;\n\n    @Input('release')\n    @audioParam('release')\n    releaseParam?: AudioParamInput;\n\n    @Input('threshold')\n    @audioParam('threshold')\n    thresholdParam?: AudioParamInput;\n\n    constructor(\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @SkipSelf() @Inject(AUDIO_NODE) node: AudioNode | null,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n        @Attribute('attack') attackArg: string | null,\n        @Attribute('knee') kneeArg: string | null,\n        @Attribute('ratio') ratioArg: string | null,\n        @Attribute('release') releaseArg: string | null,\n        @Attribute('threshold') thresholdArg: string | null,\n    ) {\n        const attack = parse(attackArg, 0.003);\n        const knee = parse(kneeArg, 30);\n        const ratio = parse(ratioArg, 12);\n        const release = parse(releaseArg, 0.25);\n        const threshold = parse(thresholdArg, -24);\n\n        if (modern) {\n            super(context, {attack, knee, ratio, release, threshold});\n            connect(\n                node,\n                this,\n            );\n        } else {\n            const result = context.createDynamicsCompressor() as WebAudioDynamicsCompressor;\n\n            Object.setPrototypeOf(result, WebAudioDynamicsCompressor.prototype);\n            connect(\n                node,\n                result,\n            );\n            result.attack.value = attack;\n            result.knee.value = knee;\n            result.ratio.value = ratio;\n            result.release.value = release;\n            result.threshold.value = threshold;\n\n            return result;\n        }\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n}\n","import {\n    Attribute,\n    Directive,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    SkipSelf,\n} from '@angular/core';\nimport {audioParam} from '../decorators/audio-param';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\nimport {AudioParamInput} from '../types/audio-param-input';\nimport {connect} from '../utils/connect';\nimport {parse} from '../utils/parse';\n\n// @dynamic\n@Directive({\n    selector: '[waGainNode]',\n    exportAs: 'AudioNode',\n    inputs: ['channelCount', 'channelCountMode', 'channelInterpretation'],\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioGain),\n        },\n    ],\n})\nexport class WebAudioGain extends GainNode implements OnDestroy {\n    @Input('gain')\n    @audioParam('gain')\n    gainParam?: AudioParamInput;\n\n    constructor(\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @SkipSelf() @Inject(AUDIO_NODE) node: AudioNode | null,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n        @Attribute('gain') gainArg: string | null,\n    ) {\n        const gain = parse(gainArg, 1);\n\n        if (modern) {\n            super(context, {gain});\n            connect(\n                node,\n                this,\n            );\n        } else {\n            const result = context.createGain() as WebAudioGain;\n\n            Object.setPrototypeOf(result, WebAudioGain.prototype);\n            connect(\n                node,\n                result,\n            );\n            result.gain.value = gain;\n\n            return result;\n        }\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n}\n","import {Directive, forwardRef, Inject, OnDestroy, SkipSelf} from '@angular/core';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\nimport {FEEDBACK_COEFFICIENTS} from '../tokens/feedback-coefficients';\nimport {FEEDFORWARD_COEFFICIENTS} from '../tokens/feedforward-coefficients';\nimport {connect} from '../utils/connect';\n\n// @dynamic\n@Directive({\n    selector: '[waIIRFilterNode]',\n    exportAs: 'AudioNode',\n    inputs: ['channelCount', 'channelCountMode', 'channelInterpretation'],\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioIIRFilter),\n        },\n    ],\n})\nexport class WebAudioIIRFilter extends IIRFilterNode implements OnDestroy {\n    constructor(\n        @Inject(FEEDBACK_COEFFICIENTS) feedback: number[],\n        @Inject(FEEDFORWARD_COEFFICIENTS) feedforward: number[],\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n        @SkipSelf() @Inject(AUDIO_NODE) node: AudioNode | null,\n    ) {\n        if (modern) {\n            super(context, {feedback, feedforward});\n            connect(\n                node,\n                this,\n            );\n        } else {\n            const result = context.createIIRFilter(\n                feedback,\n                feedforward,\n            ) as WebAudioIIRFilter;\n\n            Object.setPrototypeOf(result, WebAudioIIRFilter.prototype);\n            connect(\n                node,\n                result,\n            );\n\n            return result;\n        }\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SkipSelf,\n} from '@angular/core';\nimport {audioParam} from '../decorators/audio-param';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\nimport {AudioParamInput} from '../types/audio-param-input';\nimport {connect} from '../utils/connect';\nimport {fallbackAudioParam} from '../utils/fallback-audio-param';\n\n// @dynamic\n@Directive({\n    selector: '[waPannerNode]',\n    exportAs: 'AudioNode',\n    inputs: [\n        'coneInnerAngle',\n        'coneOuterAngle',\n        'coneOuterGain',\n        'distanceModel',\n        'maxDistance',\n        'panningModel',\n        'refDistance',\n        'rolloffFactor',\n        'channelCount',\n        'channelCountMode',\n        'channelInterpretation',\n    ],\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioPanner),\n        },\n    ],\n})\nexport class WebAudioPanner extends PannerNode implements OnDestroy, OnChanges {\n    @Input()\n    @audioParam('orientationX')\n    orientationXParam?: AudioParamInput;\n\n    @Input()\n    @audioParam('orientationY')\n    orientationYParam?: AudioParamInput;\n\n    @Input()\n    @audioParam('orientationZ')\n    orientationZParam?: AudioParamInput;\n\n    @Input()\n    @audioParam('positionX')\n    positionXParam?: AudioParamInput;\n\n    @Input()\n    @audioParam('positionY')\n    positionYParam?: AudioParamInput;\n\n    @Input()\n    @audioParam('positionZ')\n    positionZParam?: AudioParamInput;\n\n    constructor(\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @SkipSelf() @Inject(AUDIO_NODE) node: AudioNode | null,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n    ) {\n        if (modern) {\n            super(context);\n            connect(\n                node,\n                this,\n            );\n        } else {\n            const result = context.createPanner() as WebAudioPanner;\n\n            Object.setPrototypeOf(result, WebAudioPanner.prototype);\n            connect(\n                node,\n                result,\n            );\n\n            return result;\n        }\n    }\n\n    ngOnChanges() {\n        if (this.positionX instanceof AudioParam) {\n            return;\n        }\n\n        // Fallback for older browsers\n        this.setOrientation(\n            fallbackAudioParam(this.orientationXParam),\n            fallbackAudioParam(this.orientationYParam),\n            fallbackAudioParam(this.orientationZParam),\n        );\n        this.setPosition(\n            fallbackAudioParam(this.positionXParam),\n            fallbackAudioParam(this.positionYParam),\n            fallbackAudioParam(this.positionZParam),\n        );\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n}\n","import {\n    Attribute,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    OnDestroy,\n    Output,\n    SkipSelf,\n} from '@angular/core';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {connect} from '../utils/connect';\n\n// @dynamic\n@Directive({\n    selector: '[waScriptProcessorNode]',\n    exportAs: 'AudioNode',\n    inputs: ['channelCount', 'channelCountMode', 'channelInterpretation'],\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioScriptProcessor),\n        },\n    ],\n})\nexport class WebAudioScriptProcessor extends ScriptProcessorNode implements OnDestroy {\n    @Output()\n    audioprocess?: EventEmitter<AudioProcessingEvent>;\n\n    constructor(\n        @Attribute('bufferSize') bufferSize: string | null,\n        @Attribute('numberOfInputChannels') numberOfInputChannels: string | null,\n        @Attribute('numberOfOutputChannels') numberOfOutputChannels: string | null,\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @SkipSelf() @Inject(AUDIO_NODE) node: AudioNode | null,\n    ) {\n        try {\n            const result = context.createScriptProcessor(\n                parseInt(bufferSize || '', 10) || 0,\n                parseInt(numberOfInputChannels || '', 10) || 2,\n                parseInt(numberOfOutputChannels || '', 10) || 2,\n            ) as WebAudioScriptProcessor;\n\n            Object.setPrototypeOf(result, WebAudioScriptProcessor.prototype);\n            connect(\n                node,\n                result,\n            );\n\n            const audioprocess = new EventEmitter<AudioProcessingEvent>();\n\n            result.audioprocess = audioprocess;\n            result.onaudioprocess = e => audioprocess.emit(e);\n\n            return result;\n        } catch (_) {}\n        super();\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n}\n","import {\n    Attribute,\n    Directive,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    SkipSelf,\n} from '@angular/core';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {AudioParamInput} from '../types/audio-param-input';\nimport {connect} from '../utils/connect';\nimport {fallbackAudioParam} from '../utils/fallback-audio-param';\nimport {parse} from '../utils/parse';\nimport {processAudioParam} from '../utils/process-audio-param';\n\n// @dynamic\n@Directive({\n    selector: '[waStereoPannerNode]',\n    exportAs: 'AudioNode',\n    inputs: ['channelCount', 'channelCountMode', 'channelInterpretation'],\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioStereoPanner),\n        },\n    ],\n})\nexport class WebAudioStereoPanner extends StereoPannerNode implements OnDestroy {\n    @Input('pan')\n    set panParam(pan: AudioParamInput) {\n        if ('setPosition' in this) {\n            /** fallback for browsers not supporting {@link StereoPannerNode} */\n            // @ts-ignore\n            this.fallbackToPannerNode(fallbackAudioParam(pan));\n        } else {\n            processAudioParam(this.pan, pan, this.context.currentTime);\n        }\n    }\n\n    constructor(\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @SkipSelf() @Inject(AUDIO_NODE) node: AudioNode | null,\n        @Attribute('pan') panArg: string | null,\n    ) {\n        const pan = parse(panArg, 0);\n\n        try {\n            // @ts-ignore\n            const _test = new StereoPannerNode(context);\n        } catch (_) {\n            const result = (context.createPanner() as unknown) as WebAudioStereoPanner;\n\n            Object.setPrototypeOf(result, WebAudioStereoPanner.prototype);\n            result.fallbackToPannerNode(fallbackAudioParam(pan));\n            connect(\n                node,\n                result,\n            );\n\n            return result;\n        }\n\n        super(context, {pan});\n        connect(\n            node,\n            this,\n        );\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n\n    // @ts-ignore\n    private fallbackToPannerNode(pan: number) {\n        const xDeg = pan * 100;\n        const zDeg = xDeg > 0 ? 270 - xDeg : xDeg + 90;\n        const x = Math.sin(xDeg * (Math.PI / 180));\n        const z = Math.sin(zDeg * (Math.PI / 180));\n\n        // @ts-ignore\n        this.setPosition(x, 0, z);\n    }\n}\n","import {Directive, forwardRef, Inject, OnDestroy, SkipSelf} from '@angular/core';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\nimport {connect} from '../utils/connect';\n\n// @dynamic\n@Directive({\n    selector: '[waWaveShaperNode]',\n    exportAs: 'AudioNode',\n    inputs: [\n        'oversample',\n        'curve',\n        'channelCount',\n        'channelCountMode',\n        'channelInterpretation',\n    ],\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioWaveShaper),\n        },\n    ],\n})\nexport class WebAudioWaveShaper extends WaveShaperNode implements OnDestroy {\n    constructor(\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @SkipSelf() @Inject(AUDIO_NODE) node: AudioNode | null,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n    ) {\n        if (modern) {\n            super(context);\n            connect(\n                node,\n                this,\n            );\n        } else {\n            const result = context.createWaveShaper() as WebAudioWaveShaper;\n\n            Object.setPrototypeOf(result, WebAudioWaveShaper.prototype);\n            connect(\n                node,\n                result,\n            );\n\n            return result;\n        }\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n}\n","import {\n    Attribute,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    OnDestroy,\n    Output,\n    SkipSelf,\n} from '@angular/core';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {connect} from '../utils/connect';\n\n// @dynamic\n@Directive({\n    selector: '[waAudioWorkletNode][name]',\n    exportAs: 'AudioNode',\n    inputs: ['channelCount', 'channelCountMode', 'channelInterpretation'],\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioWorklet),\n        },\n    ],\n})\nexport class WebAudioWorklet extends AudioWorkletNode implements OnDestroy {\n    @Output()\n    processorerror = new EventEmitter<void>();\n\n    readonly onprocessorerror = () => this.processorerror.emit();\n\n    constructor(\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @SkipSelf() @Inject(AUDIO_NODE) node: AudioNode | null,\n        @Attribute('name') name: string,\n    ) {\n        super(context, name);\n\n        connect(\n            node,\n            this,\n        );\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {AudioParamAutomation} from '../types/audio-param-automation';\nimport {AudioParamAutomationMode} from '../types/audio-param-automation-mode';\nimport {AudioParamCurve} from '../types/audio-param-curve';\n\n@Pipe({\n    name: 'waAudioParam',\n})\nexport class WebAudioParamPipe implements PipeTransform {\n    /**\n     * Creates {@link AudioParamAutomation} to use with {@link AudioParam} inputs\n     *\n     * @param value target value\n     * @param duration duration of the automation\n     * @param mode either instant for given duration or linear/exponential ramp\n     */\n    transform(\n        value: number | number[],\n        duration: number,\n        mode: AudioParamAutomationMode = 'exponential',\n    ): AudioParamAutomation | AudioParamCurve {\n        return value instanceof Array\n            ? {\n                  value,\n                  duration,\n              }\n            : {\n                  value,\n                  duration,\n                  mode,\n              };\n    }\n}\n","import {Inject, Pipe, PipeTransform} from '@angular/core';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\n\n// @dynamic\n@Pipe({\n    name: 'waPeriodicWave',\n})\nexport class WebAudioPeriodicWavePipe implements PipeTransform {\n    constructor(@Inject(AUDIO_CONTEXT) private readonly context: BaseAudioContext) {}\n\n    /**\n     * Creates {@link PeriodicWave} to use with {@link OscillatorNode}\n     *\n     * @param real cosine terms (traditionally the A terms)\n     * @param imag sine terms (traditionally the B terms)\n     * @param disableNormalization see {@lin PeriodicWaveConstraints}\n     */\n    transform(\n        real: number[],\n        imag?: number[],\n        disableNormalization?: boolean,\n    ): PeriodicWave {\n        return this.context.createPeriodicWave(\n            new Float32Array(real),\n            imag ? new Float32Array(imag) : new Float32Array(real.length),\n            {\n                disableNormalization: !!disableNormalization,\n            },\n        );\n    }\n}\n","/**\n * Public API Surface of @ng-web-apis/audio\n */\nexport * from './decorators/audio-param';\n\nexport * from './directives/audio-context';\nexport * from './directives/channel';\nexport * from './directives/destination';\nexport * from './directives/listener';\nexport * from './directives/offline-audio-context';\nexport * from './directives/output';\nexport * from './directives/stream-destination';\n\nexport * from './nodes/analyser';\nexport * from './nodes/biquad-filter';\nexport * from './nodes/channel-merger';\nexport * from './nodes/channel-splitter';\nexport * from './nodes/convolver';\nexport * from './nodes/delay';\nexport * from './nodes/dynamics-compressor';\nexport * from './nodes/gain';\nexport * from './nodes/iir-filter';\nexport * from './nodes/panner';\nexport * from './nodes/script-processor';\nexport * from './nodes/stereo-panner';\nexport * from './nodes/wave-shaper';\nexport * from './nodes/worklet';\n\nexport * from './pipes/audio-param.pipe';\nexport * from './pipes/periodic-wave.pipe';\n\nexport * from './services/audio-buffer.service';\n\nexport * from './sources/buffer-source';\nexport * from './sources/constant-source';\nexport * from './sources/media-source';\nexport * from './sources/media-stream-source';\nexport * from './sources/media-stream-track-source';\nexport * from './sources/oscillator';\n\nexport * from './tokens/audio-context';\nexport * from './tokens/audio-node';\nexport * from './tokens/audio-worklet-processors';\nexport * from './tokens/audio-worklet-processors-ready';\nexport * from './tokens/feedback-coefficients';\nexport * from './tokens/feedforward-coefficients';\nexport * from './tokens/media-stream';\nexport * from './tokens/media-stream-track';\nexport * from './tokens/support';\n\nexport * from './types/audio-param-input';\nexport * from './types/audio-param-automation';\nexport * from './types/audio-param-automation-mode';\nexport * from './types/audio-param-curve';\n\nexport * from './module';\n","import {Inject, Injectable} from '@angular/core';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\n\n// @dynamic\n@Injectable({\n    providedIn: 'root',\n})\nexport class AudioBufferService {\n    private readonly cache = new Map<string, AudioBuffer>();\n\n    constructor(@Inject(AUDIO_CONTEXT) private readonly context: BaseAudioContext) {}\n\n    fetch(url: string): Promise<AudioBuffer> {\n        return new Promise<AudioBuffer>((resolve, reject) => {\n            if (this.cache.has(url)) {\n                resolve(this.cache.get(url));\n\n                return;\n            }\n\n            const request = new XMLHttpRequest();\n\n            request.open('GET', url, true);\n            request.responseType = 'arraybuffer';\n            request.onerror = reject;\n            request.onabort = reject;\n            request.onload = () => {\n                this.context.decodeAudioData(\n                    request.response,\n                    buffer => {\n                        this.cache.set(url, buffer);\n                        resolve(buffer);\n                    },\n                    reject,\n                );\n            };\n            request.send();\n        });\n    }\n}\n","import {\n    Attribute,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Output,\n} from '@angular/core';\nimport {of, Subject} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\nimport {audioParam} from '../decorators/audio-param';\nimport {AudioBufferService} from '../services/audio-buffer.service';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\nimport {AudioParamInput} from '../types/audio-param-input';\nimport {parse} from '../utils/parse';\n\n// @dynamic\n@Directive({\n    selector: '[waAudioBufferSourceNode]',\n    exportAs: 'AudioNode',\n    inputs: [\n        'loop',\n        'loopStart',\n        'loopEnd',\n        'channelCount',\n        'channelCountMode',\n        'channelInterpretation',\n    ],\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioBufferSource),\n        },\n    ],\n})\nexport class WebAudioBufferSource extends AudioBufferSourceNode implements OnDestroy {\n    @Input('buffer')\n    set bufferSetter(source: AudioBuffer | null | string) {\n        this.buffer$.next(source);\n    }\n\n    @Input('detune')\n    @audioParam('detune')\n    detuneParam?: AudioParamInput;\n\n    @Input('playbackRate')\n    @audioParam('playbackRate')\n    playbackRateParam?: AudioParamInput;\n\n    @Output()\n    ended?: EventEmitter<void>;\n\n    buffer$!: Subject<AudioBuffer | null | string>;\n\n    constructor(\n        @Inject(AudioBufferService) audioBufferService: AudioBufferService,\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n        @Attribute('autoplay') autoplay: string | null,\n        @Attribute('detune') detuneArg: string | null,\n        @Attribute('playbackRate') playbackRateArg: string | null,\n    ) {\n        const detune = parse(detuneArg, 0);\n        const playbackRate = parse(playbackRateArg, 1);\n\n        if (modern) {\n            super(context, {detune, playbackRate});\n            WebAudioBufferSource.init(this, null, autoplay, audioBufferService);\n        } else {\n            const result = context.createBufferSource() as WebAudioBufferSource;\n\n            Object.setPrototypeOf(\n                WebAudioBufferSource.prototype,\n                Object.getPrototypeOf(result),\n            );\n            Object.setPrototypeOf(result, WebAudioBufferSource.prototype);\n\n            result.playbackRate.value = playbackRate;\n            WebAudioBufferSource.init(result, null, autoplay, audioBufferService);\n\n            return result;\n        }\n    }\n\n    ngOnDestroy() {\n        this.buffer$.complete();\n\n        try {\n            this.stop();\n        } catch (_) {}\n\n        this.disconnect();\n    }\n\n    static init(\n        that: WebAudioBufferSource,\n        _node: AudioNode | null,\n        autoplay: string | null,\n        audioBufferService: AudioBufferService,\n    ) {\n        if (autoplay !== null) {\n            that.start();\n        }\n\n        const ended = new EventEmitter<void>();\n\n        that.ended = ended;\n        that.onended = () => ended.emit();\n        that.buffer$ = new Subject<AudioBuffer | null | string>();\n        that.buffer$\n            .pipe(\n                switchMap(source =>\n                    typeof source === 'string'\n                        ? audioBufferService.fetch(source)\n                        : of(source),\n                ),\n            )\n            .subscribe(buffer => {\n                that.buffer = buffer;\n            });\n    }\n}\n","import {\n    Attribute,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Output,\n} from '@angular/core';\nimport {audioParam} from '../decorators/audio-param';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {AudioParamInput} from '../types/audio-param-input';\nimport {parse} from '../utils/parse';\n\n// @dynamic\n@Directive({\n    selector: '[waConstantSourceNode]',\n    exportAs: 'AudioNode',\n    inputs: ['channelCount', 'channelCountMode', 'channelInterpretation'],\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioConstantSource),\n        },\n    ],\n})\nexport class WebAudioConstantSource extends ConstantSourceNode implements OnDestroy {\n    @Input('offset')\n    @audioParam('offset')\n    offsetParam?: AudioParamInput;\n\n    @Output()\n    ended = new EventEmitter<void>();\n\n    readonly onended = () => this.ended.emit();\n\n    constructor(\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @Attribute('autoplay') autoplay: string | null,\n        @Attribute('offset') offset: string | null,\n    ) {\n        super(context, {\n            offset: parse(offset, 0),\n        });\n\n        if (autoplay !== null) {\n            this.start();\n        }\n    }\n\n    ngOnDestroy() {\n        try {\n            this.stop();\n        } catch (_) {}\n\n        this.disconnect();\n    }\n}\n","import {Directive, ElementRef, forwardRef, Inject, OnDestroy} from '@angular/core';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\n\n// @dynamic\n@Directive({\n    selector:\n        'audio[waMediaElementAudioSourceNode], video[waMediaElementAudioSourceNode]',\n    exportAs: 'AudioNode',\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioMediaSource),\n        },\n    ],\n})\nexport class WebAudioMediaSource extends MediaElementAudioSourceNode\n    implements OnDestroy {\n    constructor(\n        @Inject(AUDIO_CONTEXT) context: AudioContext,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n        @Inject(ElementRef) {nativeElement}: ElementRef<HTMLMediaElement>,\n    ) {\n        if (modern) {\n            super(context, {mediaElement: nativeElement});\n        } else {\n            const result = context.createMediaElementSource(nativeElement);\n\n            Object.setPrototypeOf(result, WebAudioMediaSource.prototype);\n\n            return result as WebAudioMediaSource;\n        }\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n}\n","import {Directive, forwardRef, Inject, OnDestroy} from '@angular/core';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\nimport {MEDIA_STREAM} from '../tokens/media-stream';\n\n// @dynamic\n@Directive({\n    selector: '[waMediaStreamAudioSourceNode]',\n    exportAs: 'AudioNode',\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioMediaStreamSource),\n        },\n    ],\n})\nexport class WebAudioMediaStreamSource extends MediaStreamAudioSourceNode\n    implements OnDestroy {\n    constructor(\n        @Inject(MEDIA_STREAM) mediaStream: MediaStream,\n        @Inject(AUDIO_CONTEXT) context: AudioContext,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n    ) {\n        if (modern) {\n            super(context, {mediaStream});\n        } else {\n            const result = context.createMediaStreamSource(mediaStream);\n\n            Object.setPrototypeOf(result, WebAudioMediaStreamSource.prototype);\n\n            return result as WebAudioMediaStreamSource;\n        }\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n}\n","import {Directive, forwardRef, Inject, OnDestroy} from '@angular/core';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {MEDIA_STREAM_TRACK} from '../tokens/media-stream-track';\n\n// @dynamic\n@Directive({\n    selector: '[waMediaStreamTrackAudioSourceNode]',\n    exportAs: 'AudioNode',\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioMediaStreamTrackSource),\n        },\n    ],\n})\nexport class WebAudioMediaStreamTrackSource extends MediaStreamTrackAudioSourceNode\n    implements OnDestroy {\n    constructor(\n        @Inject(MEDIA_STREAM_TRACK) mediaStreamTrack: MediaStreamTrack,\n        @Inject(AUDIO_CONTEXT) context: AudioContext,\n    ) {\n        super(context, {mediaStreamTrack});\n    }\n\n    ngOnDestroy() {\n        this.disconnect();\n    }\n}\n","import {\n    Attribute,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Output,\n} from '@angular/core';\nimport {audioParam} from '../decorators/audio-param';\nimport {AUDIO_CONTEXT} from '../tokens/audio-context';\nimport {AUDIO_NODE} from '../tokens/audio-node';\nimport {CONSTRUCTOR_SUPPORT} from '../tokens/constructor-support';\nimport {AudioParamInput} from '../types/audio-param-input';\nimport {connect} from '../utils/connect';\nimport {parse} from '../utils/parse';\n\n// @dynamic\n@Directive({\n    selector: '[waOscillatorNode]',\n    exportAs: 'AudioNode',\n    inputs: ['type', 'channelCount', 'channelCountMode', 'channelInterpretation'],\n    providers: [\n        {\n            provide: AUDIO_NODE,\n            useExisting: forwardRef(() => WebAudioOscillator),\n        },\n    ],\n})\nexport class WebAudioOscillator extends OscillatorNode implements OnDestroy {\n    @Input()\n    set periodicWave(periodicWave: PeriodicWave) {\n        this.setPeriodicWave(periodicWave);\n    }\n\n    @Input('detune')\n    @audioParam('detune')\n    detuneParam?: AudioParamInput;\n\n    @Input('frequency')\n    @audioParam('frequency')\n    frequencyParam?: AudioParamInput;\n\n    @Output()\n    ended?: EventEmitter<void>;\n\n    constructor(\n        @Inject(AUDIO_CONTEXT) context: BaseAudioContext,\n        @Inject(CONSTRUCTOR_SUPPORT) modern: boolean,\n        @Attribute('autoplay') autoplay: string | null,\n        @Attribute('detune') detuneArg: string | null,\n        @Attribute('frequency') frequencyArg: string | null,\n    ) {\n        const detune = parse(detuneArg, 0);\n        const frequency = parse(frequencyArg, 440);\n\n        if (modern) {\n            super(context, {detune, frequency});\n            WebAudioOscillator.init(this, null, autoplay);\n        } else {\n            const result = context.createOscillator() as WebAudioOscillator;\n\n            Object.setPrototypeOf(\n                WebAudioOscillator.prototype,\n                Object.getPrototypeOf(result),\n            );\n            Object.setPrototypeOf(result, WebAudioOscillator.prototype);\n\n            result.detune.value = detune;\n            result.frequency.value = frequency;\n            WebAudioOscillator.init(result, null, autoplay);\n\n            return result;\n        }\n    }\n\n    ngOnDestroy() {\n        try {\n            this.stop();\n        } catch (_) {}\n\n        this.disconnect();\n    }\n\n    static init(\n        that: WebAudioOscillator,\n        node: AudioNode | null,\n        autoplay: string | null,\n    ) {\n        connect(\n            node,\n            that,\n        );\n\n        if (autoplay !== null) {\n            that.start();\n        }\n\n        const ended = new EventEmitter<void>();\n\n        that.ended = ended;\n        that.onended = () => ended.emit();\n    }\n}\n","import {InjectionToken} from '@angular/core';\n\nexport const AUDIO_CONTEXT = new InjectionToken<BaseAudioContext>(\n    'Web Audio API context',\n    {\n        providedIn: 'root',\n        factory: () => new AudioContext(),\n    },\n);\n","import {InjectionToken} from '@angular/core';\n\nexport const AUDIO_NODE = new InjectionToken<AudioNode | null>(\n    'Web Audio API audio node',\n    {\n        factory: () => null,\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\nimport {AUDIO_CONTEXT} from './audio-context';\nimport {AUDIO_WORKLET_PROCESSORS} from './audio-worklet-processors';\n\nexport const AUDIO_WORKLET_PROCESSORS_READY = new InjectionToken<Promise<boolean>>(\n    'Web Audio API worklet processors resolution promise',\n    {\n        providedIn: 'root',\n        factory: () => {\n            const context = inject(AUDIO_CONTEXT);\n            const processors = inject(AUDIO_WORKLET_PROCESSORS);\n\n            if (!context.audioWorklet) {\n                return Promise.reject('AudioWorklet is not supported');\n            }\n\n            return Promise.all(\n                processors.map(processor => context.audioWorklet.addModule(processor)),\n            ).then(() => true);\n        },\n    },\n);\n","import {InjectionToken} from '@angular/core';\n\nexport const AUDIO_WORKLET_PROCESSORS = new InjectionToken<ReadonlyArray<string>>(\n    'Web Audio API worklet processors paths',\n    {\n        providedIn: 'root',\n        factory: () => [],\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\nimport {AUDIO_CONTEXT} from './audio-context';\n\n/**\n * This is mostly for internal use only\n */\nexport const CONSTRUCTOR_SUPPORT = new InjectionToken<boolean>(\n    'Tests if constructor mode of node creation is supported or a fallback to factory method is needed',\n    {\n        providedIn: 'root',\n        factory: () => {\n            try {\n                return !!new GainNode(inject(AUDIO_CONTEXT));\n            } catch (_) {\n                return false;\n            }\n        },\n    },\n);\n","import {InjectionToken} from '@angular/core';\n\nexport const FEEDBACK_COEFFICIENTS = new InjectionToken<number[]>(\n    'A sequence of feedback coefficients for IIRFilterNode',\n);\n","import {InjectionToken} from '@angular/core';\n\nexport const FEEDFORWARD_COEFFICIENTS = new InjectionToken<number[]>(\n    'A sequence of feedforward coefficients for IIRFilterNode',\n);\n","import {InjectionToken} from '@angular/core';\n\nexport const MEDIA_STREAM_TRACK = new InjectionToken<MediaStreamTrack>(\n    'MediaStreamTrack for MediaStreamTrackAudioSourceNode',\n);\n","import {InjectionToken} from '@angular/core';\n\nexport const MEDIA_STREAM = new InjectionToken<MediaStream>(\n    'MediaStream for MediaStreamAudioSourceNode',\n);\n","import {InjectionToken} from '@angular/core';\n\nexport const WEB_AUDIO_SUPPORT = new InjectionToken<boolean>('Web Audio API support', {\n    providedIn: 'root',\n    factory: () => !!AudioContext,\n});\n","export function connect(\n    source?: AudioNode | null,\n    destination?: AudioNode | AudioParam | null,\n) {\n    if (source && destination) {\n        // @ts-ignore TS does not have a union override for connect method\n        source.connect(destination);\n    }\n}\n","import {AudioParamInput} from '../types/audio-param-input';\n\nexport function fallbackAudioParam(value?: AudioParamInput): number {\n    if (!value) {\n        return 0;\n    }\n\n    if (typeof value === 'number') {\n        return value;\n    }\n\n    if (value instanceof Array) {\n        const last = value[value.length - 1].value;\n\n        return typeof last === 'number' ? last : last[last.length - 1];\n    }\n\n    if (value.value instanceof Array) {\n        return value.value[value.value.length - 1];\n    }\n\n    return value.value;\n}\n","export function latencyHintFactory(\n    latencyHint: AudioContextLatencyCategory | null,\n): AudioContextLatencyCategory | number | undefined {\n    return latencyHint === null\n        ? undefined\n        : Number.parseFloat(latencyHint) || latencyHint;\n}\n","export function parse(value: string | null, fallback: number): number {\n    const parsed = parseFloat(value || '');\n\n    return isNaN(parsed) ? fallback : parsed;\n}\n","import {AudioParamAutomation} from '../types/audio-param-automation';\nimport {AudioParamCurve} from '../types/audio-param-curve';\nimport {AudioParamInput} from '../types/audio-param-input';\n\nexport function processAudioParam(\n    param: AudioParam,\n    value: AudioParamInput,\n    currentTime: number = 0,\n) {\n    if (param.cancelAndHoldAtTime) {\n        param.cancelAndHoldAtTime(currentTime);\n    } else {\n        param.cancelScheduledValues(currentTime);\n        param.setValueAtTime(guard(param.value), currentTime);\n    }\n\n    if (typeof value === 'number') {\n        param.setValueAtTime(guard(value), currentTime);\n\n        return;\n    }\n\n    if (value instanceof Array) {\n        processSchedule(param, value, currentTime);\n\n        return;\n    }\n\n    if (!('mode' in value)) {\n        param.setValueCurveAtTime(value.value, currentTime, value.duration);\n\n        return;\n    }\n\n    param.setValueAtTime(guard(param.value), currentTime);\n    processAutomation(param, value, currentTime);\n}\n\nfunction processSchedule(\n    param: AudioParam,\n    value: Array<AudioParamAutomation | AudioParamCurve>,\n    currentTime: number,\n) {\n    value.forEach(automation => {\n        if ('mode' in automation) {\n            processAutomation(param, automation, currentTime);\n        } else {\n            param.setValueCurveAtTime(automation.value, currentTime, automation.duration);\n        }\n\n        currentTime += automation.duration;\n    });\n}\n\nfunction processAutomation(\n    param: AudioParam,\n    {value, mode = 'instant', duration}: AudioParamAutomation,\n    currentTime: number,\n) {\n    switch (mode) {\n        case 'instant':\n            param.setValueAtTime(guard(value), currentTime);\n            param.setValueAtTime(guard(value), currentTime + duration);\n            break;\n        case 'exponential':\n            if (value < 0 || value * param.value < 0) {\n                param.linearRampToValueAtTime(guard(value), currentTime + duration);\n            } else {\n                param.exponentialRampToValueAtTime(guard(value), currentTime + duration);\n            }\n\n            param.setValueAtTime(guard(value), currentTime + duration);\n            break;\n        case 'linear':\n            param.linearRampToValueAtTime(guard(value), currentTime + duration);\n            break;\n    }\n}\n\nfunction guard(v: number): number {\n    return v || 0.00000001;\n}\n","import {LocationStrategy, PathLocationStrategy} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {WebAudioModule} from '@ng-web-apis/audio';\nimport {AppComponent} from './app.component';\n\n@NgModule({\n    bootstrap: [AppComponent],\n    imports: [\n        FormsModule,\n        WebAudioModule,\n        BrowserModule.withServerTransition({appId: 'demo'}),\n    ],\n    declarations: [AppComponent],\n    providers: [\n        {\n            provide: LocationStrategy,\n            useClass: PathLocationStrategy,\n        },\n    ],\n})\nexport class AppBrowserModule {}\n","module.exports = \"<button *ngIf=\\\"!started; else graph\\\" (click)=\\\"start()\\\">Start AudioContext</button>\\n<ng-template #graph>\\n    <section>\\n        <h1>Description</h1>\\n        <p>\\n            This is a demo for <code><em>@ng-web-apis/audio</em></code> — a Web Audio API\\n            declarative library for Angular. Here you can select different audio source\\n            options and see AudioNode graph for selected configuration. Demo page uses\\n            HTML elements as directives hosts, in real life scenario you can use\\n            <code>ng-container</code> so you will not have redundant DOM tags.\\n        </p>\\n    </section>\\n    <section>\\n        <h1>Source</h1>\\n\\n        <p>\\n            <label>\\n                <input\\n                    type=\\\"radio\\\"\\n                    value=\\\"buffer\\\"\\n                    name=\\\"source\\\"\\n                    [(ngModel)]=\\\"selectedSource\\\"\\n                />\\n                AudioBufferSourceNode\\n            </label>\\n        </p>\\n        <p>\\n            <label>\\n                <input\\n                    type=\\\"radio\\\"\\n                    value=\\\"media\\\"\\n                    name=\\\"source\\\"\\n                    [(ngModel)]=\\\"selectedSource\\\"\\n                />\\n                MediaElementAudioSourceNode\\n            </label>\\n        </p>\\n        <p>\\n            <label>\\n                <input\\n                    type=\\\"radio\\\"\\n                    value=\\\"oscillator\\\"\\n                    name=\\\"source\\\"\\n                    [(ngModel)]=\\\"selectedSource\\\"\\n                />\\n                OscillatorNode\\n            </label>\\n        </p>\\n\\n        <ng-container [ngSwitch]=\\\"selectedSource\\\">\\n            <ng-container *ngSwitchCase=\\\"'buffer'\\\">\\n                <button\\n                    *ngFor=\\\"let _ of buffers\\\"\\n                    #source=\\\"AudioNode\\\"\\n                    waAudioBufferSourceNode\\n                    buffer=\\\"assets/demo.mp3\\\"\\n                    [loop]=\\\"true\\\"\\n                    (click)=\\\"onClick(source, $event.target)\\\"\\n                >\\n                    Play\\n                    <ng-container\\n                        waAnalyserNode\\n                        (timeByte$)=\\\"onTimeDomain($event, canvas)\\\"\\n                    >\\n                        <ng-container [waOutput]=\\\"chain || fallback\\\"></ng-container>\\n                    </ng-container>\\n                </button>\\n            </ng-container>\\n            <audio\\n                *ngSwitchCase=\\\"'media'\\\"\\n                waMediaElementAudioSourceNode\\n                src=\\\"assets/demo.mp3\\\"\\n                loop\\n                controls\\n            >\\n                <ng-container waAnalyserNode (timeByte$)=\\\"onTimeDomain($event, canvas)\\\">\\n                    <ng-container [waOutput]=\\\"chain || fallback\\\"></ng-container>\\n                </ng-container>\\n            </audio>\\n            <ng-container *ngSwitchCase=\\\"'oscillator'\\\">\\n                <button\\n                    *ngFor=\\\"let _ of buffers\\\"\\n                    #source=\\\"AudioNode\\\"\\n                    waOscillatorNode\\n                    [frequency]=\\\"100\\\"\\n                    [periodicWave]=\\\"real | waPeriodicWave\\\"\\n                    (click)=\\\"onClick(source, $event.target)\\\"\\n                >\\n                    Play\\n                    <ng-container\\n                        waAnalyserNode\\n                        (timeByte$)=\\\"onTimeDomain($event, canvas)\\\"\\n                    >\\n                        <ng-container [waOutput]=\\\"chain || fallback\\\"></ng-container>\\n                    </ng-container>\\n                </button>\\n            </ng-container>\\n        </ng-container>\\n\\n        <p>\\n            <canvas #fallback=\\\"AudioNode\\\" #canvas waAudioDestinationNode></canvas>\\n        </p>\\n    </section>\\n\\n    <section>\\n        <h1>Chain</h1>\\n\\n        <p>\\n            <label>\\n                <input\\n                    type=\\\"radio\\\"\\n                    name=\\\"chain\\\"\\n                    value=\\\"dry\\\"\\n                    [(ngModel)]=\\\"selectedChain\\\"\\n                />\\n                Dry\\n            </label>\\n        </p>\\n        <p>\\n            <label>\\n                <input\\n                    type=\\\"radio\\\"\\n                    name=\\\"chain\\\"\\n                    value=\\\"balance\\\"\\n                    [(ngModel)]=\\\"selectedChain\\\"\\n                />\\n                Balance\\n            </label>\\n        </p>\\n        <p>\\n            <label>\\n                <input\\n                    type=\\\"radio\\\"\\n                    name=\\\"chain\\\"\\n                    value=\\\"delay\\\"\\n                    [(ngModel)]=\\\"selectedChain\\\"\\n                />\\n                Delay\\n            </label>\\n        </p>\\n        <p>\\n            <label>\\n                <input\\n                    type=\\\"radio\\\"\\n                    name=\\\"chain\\\"\\n                    value=\\\"complex\\\"\\n                    [(ngModel)]=\\\"selectedChain\\\"\\n                />\\n                Complex\\n            </label>\\n        </p>\\n\\n        <ng-container [ngSwitch]=\\\"selectedChain\\\">\\n            <ng-container *ngSwitchCase=\\\"'balance'\\\">\\n                <fieldset #chain=\\\"AudioNode\\\" waGainNode [gain]=\\\"gain | waAudioParam: 0.1\\\">\\n                    <legend>GainNode</legend>\\n                    <input type=\\\"range\\\" min=\\\"0\\\" max=\\\"1\\\" step=\\\"0.01\\\" [(ngModel)]=\\\"gain\\\" />\\n                    <fieldset waStereoPannerNode [pan]=\\\"pan | waAudioParam: 0.1\\\">\\n                        <legend>StereoPannerNode</legend>\\n                        <input\\n                            type=\\\"range\\\"\\n                            min=\\\"-1\\\"\\n                            max=\\\"1\\\"\\n                            step=\\\"0.01\\\"\\n                            [(ngModel)]=\\\"pan\\\"\\n                        />\\n                        <fieldset waAudioDestinationNode>\\n                            <legend>AudioDestinationNode</legend>\\n                        </fieldset>\\n                    </fieldset>\\n                </fieldset>\\n            </ng-container>\\n\\n            <ng-container *ngSwitchCase=\\\"'delay'\\\">\\n                <fieldset #chain=\\\"AudioNode\\\" waGainNode [gain]=\\\"gain | waAudioParam: 0.1\\\">\\n                    <legend>GainNode</legend>\\n                    <em>For feedback loop purposes only</em>\\n\\n                    <fieldset waDelayNode [delayTime]=\\\"delayTime | waAudioParam: 0.1\\\">\\n                        <legend>DelayNode</legend>\\n                        <input\\n                            type=\\\"range\\\"\\n                            min=\\\"0\\\"\\n                            max=\\\"1\\\"\\n                            step=\\\"0.01\\\"\\n                            [(ngModel)]=\\\"delayTime\\\"\\n                        />\\n                        <fieldset waGainNode [gain]=\\\"delayGain\\\">\\n                            <legend>GainNode</legend>\\n                            <input\\n                                type=\\\"range\\\"\\n                                min=\\\"0\\\"\\n                                max=\\\"1\\\"\\n                                step=\\\"0.01\\\"\\n                                [(ngModel)]=\\\"delayGain\\\"\\n                            />\\n                            <fieldset [waOutput]=\\\"chain\\\">\\n                                <legend>Output</legend>\\n                                <em>Connected back to the beginning of the chain</em>\\n                            </fieldset>\\n                        </fieldset>\\n                    </fieldset>\\n                    <fieldset waAudioDestinationNode>\\n                        <legend>AudioDestinationNode</legend>\\n                    </fieldset>\\n                </fieldset>\\n            </ng-container>\\n\\n            <ng-container *ngSwitchCase=\\\"'complex'\\\">\\n                <fieldset\\n                    #chain=\\\"AudioNode\\\"\\n                    waBiquadFilterNode\\n                    [type]=\\\"type\\\"\\n                    [gain]=\\\"filterGain | waAudioParam: 0.1\\\"\\n                    [frequency]=\\\"frequency | waAudioParam: 0.1\\\"\\n                    [Q]=\\\"Q | waAudioParam: 0.1\\\"\\n                    [detune]=\\\"detune | waAudioParam: 0.1\\\"\\n                >\\n                    <legend>BiquadFilterNode</legend>\\n                    <label>\\n                        <select [(ngModel)]=\\\"type\\\">\\n                            <option value=\\\"lowpass\\\">lowpass</option>\\n                            <option value=\\\"highpass\\\">highpass</option>\\n                            <option value=\\\"bandpass\\\">bandpass</option>\\n                            <option value=\\\"lowshelf\\\">lowshelf</option>\\n                            <option value=\\\"highshelf\\\">highshelf</option>\\n                            <option value=\\\"peaking\\\">peaking</option>\\n                            <option value=\\\"notch\\\">notch</option>\\n                            <option value=\\\"allpass\\\">allpass</option>\\n                        </select>\\n                        <code>type</code>\\n                    </label>\\n                    <label>\\n                        <input\\n                            type=\\\"range\\\"\\n                            min=\\\"0\\\"\\n                            max=\\\"1\\\"\\n                            step=\\\"0.01\\\"\\n                            [(ngModel)]=\\\"filterGain\\\"\\n                        />\\n                        <code>gain</code>\\n                    </label>\\n                    <label>\\n                        <input type=\\\"range\\\" min=\\\"20\\\" max=\\\"5000\\\" [(ngModel)]=\\\"frequency\\\" />\\n                        <code>frequency</code>\\n                    </label>\\n                    <label>\\n                        <input type=\\\"range\\\" min=\\\"1\\\" max=\\\"100\\\" [(ngModel)]=\\\"Q\\\" />\\n                        <code>Q</code>\\n                    </label>\\n                    <label>\\n                        <input type=\\\"range\\\" min=\\\"0\\\" max=\\\"100\\\" [(ngModel)]=\\\"detune\\\" />\\n                        <code>detune</code>\\n                    </label>\\n                    <fieldset waWaveShaperNode oversample=\\\"4x\\\" [curve]=\\\"curve\\\">\\n                        <legend>WaveShaperNode</legend>\\n                        <input\\n                            type=\\\"range\\\"\\n                            min=\\\"0\\\"\\n                            max=\\\"20\\\"\\n                            step=\\\"0.1\\\"\\n                            [ngModel]=\\\"distortion\\\"\\n                            (ngModelChange)=\\\"onCurveChange($event)\\\"\\n                        />\\n                        <ng-container\\n                            waGainNode\\n                            [gain]=\\\"distortionCompensation | waAudioParam: 0.1\\\"\\n                        >\\n                            <fieldset waConvolverNode buffer=\\\"assets/response.m4a\\\">\\n                                <legend>ConvolverNode</legend>\\n                                <fieldset waAudioDestinationNode>\\n                                    <legend>AudioDestinationNode</legend>\\n                                </fieldset>\\n                            </fieldset>\\n                        </ng-container>\\n                    </fieldset>\\n                </fieldset>\\n            </ng-container>\\n        </ng-container>\\n    </section>\\n</ng-template>\\n\"","import {ChangeDetectionStrategy, Component, Inject, ViewChild} from '@angular/core';\nimport {AUDIO_CONTEXT} from '@ng-web-apis/audio';\n\n@Component({\n    selector: 'main',\n    templateUrl: './app.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent {\n    buffers = [Date.now()];\n\n    selectedChain = 'dry';\n\n    selectedSource = 'buffer';\n\n    gain = 1;\n\n    pan = 0;\n\n    delayTime = 1;\n\n    delayGain = 0.5;\n\n    distortion = 20;\n\n    frequency = 350;\n\n    detune = 0;\n\n    filterGain = 0;\n\n    Q = 1;\n\n    type: BiquadFilterType = 'lowpass';\n\n    curve = makeDistortionCurve(this.distortion);\n\n    started = false;\n\n    readonly real = [0, 0, 1, 0, 1];\n\n    @ViewChild('chain')\n    readonly chain?: AudioNode;\n\n    constructor(@Inject(AUDIO_CONTEXT) private readonly context: AudioContext) {}\n\n    get distortionCompensation(): number {\n        return 1.2 - this.distortion / 20;\n    }\n\n    start() {\n        this.started = true;\n        this.context.resume();\n    }\n\n    onCurveChange(distortion: number) {\n        this.distortion = distortion;\n        this.curve = makeDistortionCurve(distortion);\n    }\n\n    onClick(source: AudioScheduledSourceNode, button: HTMLButtonElement) {\n        if (button.textContent!.trim() === 'Play') {\n            button.textContent = 'Stop';\n            source.start();\n        } else {\n            this.buffers[0] = Date.now();\n        }\n    }\n\n    onTimeDomain(array: Uint8Array, canvas: HTMLCanvasElement) {\n        const canvasCtx = canvas.getContext('2d');\n\n        if (!canvasCtx) {\n            return;\n        }\n\n        canvasCtx.fillStyle = 'rgb(200, 200, 200)';\n        canvasCtx.fillRect(0, 0, canvas.width, canvas.height);\n\n        canvasCtx.lineWidth = 2;\n        canvasCtx.strokeStyle = 'rgb(0, 0, 0)';\n\n        canvasCtx.beginPath();\n\n        const sliceWidth = (canvas.width * 1.0) / array.length;\n        let x = 0;\n\n        for (let i = 0; i < array.length; i++) {\n            const v = array[i] / 128.0;\n            const y = (v * canvas.height) / 2;\n\n            if (i === 0) {\n                canvasCtx.moveTo(x, y);\n            } else {\n                canvasCtx.lineTo(x, y);\n            }\n\n            x += sliceWidth;\n        }\n\n        canvasCtx.lineTo(canvas.width, canvas.height / 2);\n        canvasCtx.stroke();\n    }\n}\n\nfunction makeDistortionCurve(amount: number): Float32Array {\n    const samples = 44100;\n    const curve = new Float32Array(samples);\n    const deg = Math.PI / 180;\n\n    for (let i = 0; i < samples; ++i) {\n        const x = (i * 2) / samples - 1;\n\n        curve[i] = ((3 + amount) * x * 20 * deg) / (Math.PI + amount * Math.abs(x));\n    }\n\n    return curve;\n}\n","import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\nimport {AppBrowserModule} from './app/app.browser.module';\n\nplatformBrowserDynamic()\n    .bootstrapModule(AppBrowserModule)\n    .then(ref => {\n        const windowRef: any = window;\n\n        // Ensure Angular destroys itself on hot reloads for Stackblitz\n        if (windowRef['ngRef']) {\n            windowRef['ngRef'].destroy();\n        }\n\n        windowRef['ngRef'] = ref;\n    })\n    .catch(err => console.error(err));\n"],"sourceRoot":""}